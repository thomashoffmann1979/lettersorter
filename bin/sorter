#!/usr/bin/env node

var fs = require('fs'),
    program = require('commander'),
    pjson = require('../package.json'),
    path =  require('path'),
    clss = require(path.join('..','lib','main'));

var exdendedHelp = function(){
    var examples = [];
    examples.push( "  "+'Note: With *1 marked options can also be set by an environment variable');
    console.log(examples.join("\n"));
}

program
    .version(pjson.version)
    .description('sorter')
    .usage('[options]')

    .option('--master','run the masterservice')

    .option('--erp_url [erp_url]', 'the erp url *1')
    .option('--erp_client [erp_client]', 'the erp client *1')
    .option('--erp_login [erp_login]', 'the erp username *1')
    .option('--erp_password [erp_password]', 'the erp password *1')
    .option('--db_name [db_name]', 'the database name, default is sorter *1')
    .option('--db_user [db_user]', 'the database username, default is root *1')
    .option('--db_password [db_password]', 'the database password, default is empty *1')
    .option('--db_host [db_host]', 'the database host, defaults to localhost *1')
    .option('--port [port]', 'the port where the *1')
    .option('--codepages [codepages]', 'opens a browser with all nessesary barcodes, ready for printing')

    .option('--client', 'run the client')

    .option('--global_delay [global_delay]', 'if delay is not set per board global_delay is used for calculation, defaults to 500 *1')
    .option('--global_timeout [global_timeout]', 'if timeout is not set per board global_timeout is used for, defaults to 1000 *1')
    .option('--boards [boards]', 'the number of boards to be used *1');

for(var i = 0;i < 10;i++){
  program.option('--boardPin'+(i+1)+' [boardPin'+(i+1)+']', 'the pin number for the magnet-relais *1');
  program.option('--optoPin'+(i+1)+' [optoPin'+(i+1)+']', 'the pin number for the optical switch *1');
  program.option('--timeout'+(i+1)+' [timeout'+(i+1)+']', 'the timeout for closing the board *1');
  program.option('--delay'+(i+1)+' [delay'+(i+1)+']', 'the delay for opening the board *1');

}

program.option('--ocr', 'run the ocr')
    .option('--camera [camera]', 'the camera index used for ocr')
    .option('--host [host]', 'the host url')
    .on('--help', exdendedHelp)
    .parse(process.argv);

for(var key in program._events){
  if (program._events.hasOwnProperty(key)){
    if(typeof program[key]==='undefined'){
      if (typeof process.env[key]==='string'){
        program[key]=process.env[key];
      }
    }
  }
}


if (program.service){
  var main = require(path.join(__dirname,'..','lib','main'));
  //main.client(program.url,program.client,program.login,program.password);
}else if (program.master){

  //var main = require(path.join(__dirname,'..','lib','main'));

  var master = new clss.Master();
  if (program.erp_url){
    master.url = program.erp_url;
  }
  if (program.erp_client){
    master.client = program.erp_client;
  }
  if (program.erp_login){
    master.login = program.erp_login;
  }
  if (program.erp_password){
    master.password = program.erp_password;
  }
  if (program.port){
    master.port = program.port;
  }
  if (program.db_name){
    master.dbName = program.db_name;
  }
  if (program.db_host){
    master.dbHost = program.db_host;
  }
  if (program.db_user){
    master.dbUser = program.db_user;
  }
  if (program.db_password){
    master.dbPassword = program.db_password;
  }
  master.start();
  master.erp();
  if (program.codepages){
    setTimeout(function(){
      var cp = new clss.CodePages();
      cp.master = master;
      cp.create(program.codepages.toLowerCase());
    },1000);
  }


}else if (program.client){

  var client = new clss.Client();
  if (program.host){
    client.host = program.host;
  }


  nBoards = program.boards;
  if (typeof nBoards !== 'undefined'){
    var m = nBoards*1;
    var gd = program.global_delay || 500;
    var gt = program.global_timeout || 1000;

    for(var i=0;i < m;i++){

      var optoPin=program['optoPin'+(i+1)],
          boardPin=program['boardPin'+(i+1)],
          delay=program['delay'+(i+1)] || (i * gd),
          tag,
          timeout=program['timeout'+(i+1)] || gt;

      tag = 'K-'+(i+1);
      log('info','prg',tag+' set up '+m);
      if (typeof boardPin !== 'undefined' ){
        client.setUpBAO(tag,delay,timeout,boardPin,optoPin);
      }else{
        log('error','prg',tag+' not defined');
      }

    }
  }

  client.displayPinSetup();
  client.start();

}else if (program.ocr){

  var ocr = new clss.OCR();
  if (program.host){
    ocr.host = program.host;
  }
  if (program.camera){
    ocr.camera = program.camera;
  }
  ocr.start();

}else{
  program.help()
}
